{
  "name": "suit-grid-layouts",
  "version": "0.1.0",
  "author": {
    "name": "Nicolas Gallagher"
  },
  "main": "grid-layouts.css",
  "dependencies": {
    "suit-grid": "~0.3.0"
  },
  "devDependencies": {
    "normalize-css": "~2.1.0",
    "suit-utils-dimension": "~0.2.0"
  },
  "gitHead": "d70bc10a52cf71d8596dd7539b2a08a63fdb15b1",
  "readme": "# SUIT grid layouts (responsive)\n\nA SUIT component that extends [suit-grid](https://github.com/necolas/suit-grid/)\nto provide responsive CSS layouts across 2 Media Query breakpoints.\n\nIt aims to make it easier to build larger, intricate, adaptive layouts from\nsimple HTML/CSS building blocks.\n\nRead more about [SUIT's design principles](https://github.com/necolas/suit/).\n\n## Installation\n\n* [Bower](https://github.com/twitter/bower/): `bower install suit-grid-layouts --save`\n* Download: [zip](https://github.com/necolas/suit-grid-layouts/zipball/master)\n* Git: `git clone https://github.com/necolas/suit-grid-layouts`\n\n## Features\n\nThis component takes a slightly different approach to CSS grids. In addition to\nthe features inherited from [suit-grid](https://github.com/necolas/suit-grid/),\nthis responsive extension includes:\n\n* Narrow/mobile-first.\n* Fluid across all breakpoints.\n* Control over individual parts of layout across multiple viewport widths.\n* Support for 2 breakpoints at which layout transformations can occur.\n* Easy to extend with further layout changes for even wider viewports.\n* Infinite nesting of adaptive layouts.\n* Complex custom layouts.\n\nThis grid extension is a collection of simple, prebuilt, self-contained fluid\nlayouts. In contrast, flexible responsive grid systems like\n[griddle](https://github.com/necolas/griddle) use classes to directly control\nthe percentage width of _individual_ elements at multiple viewport widths.\n\n## Layouts\n\nLayouts are inherited by wider viewports.\n\n### v1: narrow-width viewports (default)\n\n* `v1-Grid--2col`: Split into 2 columns\n* `v1-Grid--3col`: Split into 3 columns\n\n### v2: medium-width viewports (>= 25em)\n\n* `v2-Grid--1col`: One column\n* `v2-Grid--2col`: Split into 2 columns\n* `v2-Grid--3col`: Split into 3 columns\n* `v2-Grid--4col`: Split into 4 columns\n* `v2-Grid--1to2`: Split into 2 columns, 1:2 ratio (requires 2 cells)\n* `v2-Grid--2to1`: Split into 2 columns, 2:1 ratio (requires 2 cells)\n* `v2-Grid--1to3`: Split into 2 columns, 1:3 ratio (requires 2 cells)\n* `v2-Grid--3to1`: Split into 2 columns, 3:1 ratio (requires 2 cells)\n* `v2-Grid--3on1`: Split into 3 columns stacked on 1 column (requires 4 cells)\n* `v2-Grid--fitToFill`: Split into 2 columns, fit:fill ratio (requires 2 cells)\n\n### v3: wide-width viewports (>= 50em)\n\n* `v2-Grid--1col`: One column\n* `v3-Grid--2col`: Split into 2 columns\n* `v3-Grid--3col`: Split into 3 columns\n* `v3-Grid--4col`: Split into 4 columns\n* `v3-Grid--1to2`: Split into 2 columns, 1:2 ratio (requires 2 cells)\n* `v3-Grid--2to1`: Split into 2 columns, 2:1 ratio (requires 2 cells)\n* `v3-Grid--2to3`: Split into 2 columns, 2:3 ratio (requires 2 cells)\n* `v3-Grid--3to2`: Split into 2 columns, 3:2 ratio (requires 2 cells)\n\n## Use\n\n### Referencing the components\n\nDuring development, you can include the grid components in your CSS using the\n`@import` directive in your main stylesheet. Your build step should take care\nof inlining these imports for production.\n\nExample:\n\n```css\n@import \"/components/suit-grid/grid.css\";\n@import \"/components/suit-grid-layouts/grid-layouts.css\";\n```\n\n### Templating\n\nA basic SUIT grid looks like this:\n\n```html\n<div class=\"Grid\">\n    <div class=\"Grid-cell\">…</div>\n    <div class=\"Grid-cell\">…</div>\n</div>\n```\n\nIt provides the core layout mechanism for grid layouts. From this base,\ndifferent cells can be given different widths (e.g., by using [SUIT's dimension\nutilities](https://github.com/necolas/suit-utils-dimension)).\n\nThe SUIT Grid Layouts component relies on adding modifier classes to the `Grid`\nand `Grid-cell` elements.\n\n* `v[n]-Grid--*`: A layout type (`*`) matched to a minimum breakpoint (`n`).\n* `Grid-cell--[n]`: A cell that has source order position `n`.\n\nIn the following example, the addition of `v1-Grid--2col` to the main grid\nresults in 2 equal-width columns at all viewport sizes (due to layout\ninheritance).\n\n```html\n<div class=\"Grid v1-Grid--2col\">\n    <div class=\"Grid-cell Grid-cell--1\">…</div>\n    <div class=\"Grid-cell Grid-cell--2\">…</div>\n    <div class=\"Grid-cell Grid-cell--3\">…</div>\n    <div class=\"Grid-cell Grid-cell--4\">…</div>\n</div>\n```\n\nTo make this grid change to 4 equal-width columns at the next breakpoint, add\nthe `v2-Grid--4col` class:\n\n```html\n<div class=\"Grid v1-Grid--2col v2-Grid--4col\">\n    <div class=\"Grid-cell Grid-cell--1\">…</div>\n    <div class=\"Grid-cell Grid-cell--2\">…</div>\n    <div class=\"Grid-cell Grid-cell--3\">…</div>\n    <div class=\"Grid-cell Grid-cell--4\">…</div>\n</div>\n```\n\nThe following example is a grid that changes from being a single column of\ncells by default (at narrow viewports - v1), to two columns (at medium\nviewports - v2), to 4 columns (at wide viewports - v3):\n\n```html\n<div class=\"Grid v2-Grid--2col v3-Grid--4col\">\n    <div class=\"Grid-cell Grid-cell--1\">…</div>\n    <div class=\"Grid-cell Grid-cell--2\">…</div>\n    <div class=\"Grid-cell Grid-cell--3\">…</div>\n    <div class=\"Grid-cell Grid-cell--4\">…</div>\n</div>\n```\n\nNesting grids is easy. Each grid adapts independently of its context. In\nthe follow example, a grid changes from 1 column (narrow) to 2 columns (medium,\nand wide). A second grid is nested within the first cell of this grid.\nThis nested grid changes from 2 columns (narrow, and medium) to 4 columns\n(wide) using the same global breakpoints.\n\n```html\n<!-- outer grid -->\n<div class=\"Grid v2-Grid--2col\">\n    <div class=\"Grid-cell Grid-cell--1\">\n        <!-- inner grid -->\n        <div class=\"Grid v1-Grid--2col v3-Grid--4col\">\n            <div class=\"Grid-cell Grid-cell--1\">…</div>\n            <div class=\"Grid-cell Grid-cell--2\">…</div>\n            <div class=\"Grid-cell Grid-cell--3\">…</div>\n            <div class=\"Grid-cell Grid-cell--4\">…</div>\n        </div>\n    </div>\n    <div class=\"Grid-cell Grid-cell--2\">\n        …\n    </div>\n</div>\n```\n\n#### Template inheritance\n\nIf you use a templating system that provides template inheritance, then this\ncan be a particularly effective way to abstract layout. The following example\nuses [Hogan](https://github.com/twitter/hogan.js)'s template inheritance\nfunctionality.\n\nReusable layout template:\n\n```html\n<!-- @name grid_doubles\n     @desc A stand-alone template for the 1col -> 2col -> 4col layout flow -->\n\n<div class=\"Grid v2-Grid--2col v3-Grid--4col\">\n    <div class=\"Grid-cell Grid-cell--1\">\n        {{$content_cell_1}}{{/content_cell_1}}>\n    </div>\n    <div class=\"Grid-cell Grid-cell--2\">\n        {{$content_cell_2}}{{/content_cell_2}}>\n    </div>\n    <div class=\"Grid-cell Grid-cell--3\">\n        {{$content_cell_3}}{{/content_cell_3}}>\n    </div>\n    <div class=\"Grid-cell Grid-cell--4\">\n        {{$content_cell_4}}{{/content_cell_4}}>\n    </div>\n</div>\n```\n\nComponent-specific template that inherits a reusable layout template:\n\n```html\n<!-- @name promos\n     @desc Layout for homepage promo boxes -->\n\n{{< grid_doubles}}\n    {{$content_cell_1}}\n        {{> partials/promo_1}}\n    {{/content_cell_1}}\n    {{$content_cell_2}}\n        {{> partials/promo_2}}\n    {{/content_cell_2}}\n    {{$content_cell_3}}\n        {{> partials/promo_3}}\n    {{/content_cell_3}}\n    {{$content_cell_4}}\n        {{> partials/promo_4}}\n    {{/content_cell_4}}\n{{/grid_doubles}}\n```\n\n### IE 8 support\n\nIf you need to support a widescreen layout for IE 8 (without resorting to\nJavaScript), you may want to look into serving the grid CSS to IE 8\n[without using media\nqueries](http://nicolasgallagher.com/mobile-first-css-sass-and-ie/)).\n\n## Browser support\n\n* Google Chrome (latest)\n* Opera (latest)\n* Firefox 4+\n* Safari 5+\n* Internet Explorer 9+ (IE 8 requires a build step)\n",
  "readmeFilename": "README.md",
  "_id": "suit-grid-layouts@0.1.0",
  "description": "A SUIT component that extends [suit-grid](https://github.com/necolas/suit-grid/) to provide responsive CSS layouts across 2 Media Query breakpoints.",
  "repository": {
    "type": "git",
    "url": "git://github.com/necolas/suit-grid-layouts.git"
  }
}